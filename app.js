// ========= Config =========
const SHEET_URL = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vR_lN4MQGP2PigjKJFOV8ZK92MvfpQWj8aH7qqntBJHOKv6XsvLAxriHmjU3WcD7kafNvNbj3pTFqND/pub?gid=0&single=true&output=csv';

// Fallback local (por si falla el CSV)
const FALLBACK_BOOKS = [
  { titulo:'La isla misteriosa', autor:'J. Verne', genero:'aventura, cl√°sico', tono:'√©pico', ritmo:'r√°pido', publico:'general', etiquetas:'isla', flags:'', 'rese√±a':'Aventura cl√°sica con ingenio y exploraci√≥n.' },
  { titulo:'Orgullo y prejuicio', autor:'J. Austen', genero:'romance, cl√°sico', tono:'√°gil', ritmo:'medio', publico:'adulto', etiquetas:'regencia', flags:'', 'rese√±a':'Romance afilado con cr√≠tica social.' },
  { titulo:'El nombre de la rosa', autor:'U. Eco', genero:'misterio, hist√≥rica', tono:'oscuro', ritmo:'pausado', publico:'adulto', etiquetas:'monasterio', flags:'', 'rese√±a':'Misterio intelectual en la Edad Media.' },
  { titulo:'El Hobbit', autor:'J.R.R. Tolkien', genero:'fantas√≠a, aventura', tono:'luminoso', ritmo:'medio', publico:'juvenil', etiquetas:'viaje', flags:'', 'rese√±a':'Viaje inici√°tico lleno de criaturas y tesoros.' },
  { titulo:'Ciencia ficci√≥n para curiosos', autor:'Varios', genero:'ciencia ficci√≥n', tono:'especulativo', ritmo:'medio', publico:'general', etiquetas:'ideas', flags:'', 'rese√±a':'Explora futuros posibles con buen pulso.' },
];

// ========= i18n =========
const i18n = {
  es: {
    brand: "Librosfera",
    taglineSummary: "Acerca de esta gu√≠a",
    taglineParagraph:
      `Recomendaciones para quienes buscan libros que atrapan, que dejan huella.
       Historias con personajes fuera de lo com√∫n o imposibles de olvidar.
       Aqu√≠ encontrar√°s lecturas que valen la pena.
       Adem√°s te se√±alamos las <strong>red flags</strong> que casi nadie menciona:
       lenguaje vulgar, referencias LGBT, relaciones t√≥xicas, violencia, tensi√≥n psicol√≥gica...
       pero que nos importa a los que buscamos buenas lecturas.`,

    chooseGenres: "Elige uno o m√°s g√©neros",
    hint: "O p√≠dele al destino que elija por ti.",
    destinyBtn: "‚ú® Que el destino lo decida",
    resetBtn: "‚Ü∫ Limpiar selecci√≥n",

    refineSearch: "Afina tu b√∫squeda",
    toneLabel: "Tono",
    paceLabel: "Ritmo",
    anyOption: "(cualquiera)",
    seeRecs: "‚ú® Ver recomendaciones",
    subhint: "Las opciones se rellenan solitas seg√∫n el/los g√©neros elegidos.",

    coffeeTitle: "‚òï ¬øTe sirvi√≥?",
    coffeeText: "Inv√≠tame un caf√© para poder seguir con este incre√≠ble proyecto ‚ú®",
    coffeeBtn: "‚òï Inv√≠tame un caf√©",

    loadingGenres: "Cargando g√©neros‚Ä¶",
    loadingCatalog: "Cargando cat√°logo‚Ä¶",
    noGenresFound: "No encontr√© g√©neros.",
    noMatches: "No hay coincidencias con esos filtros üò¢",
    pickOrDestiny: "Elige al menos un <strong>g√©nero</strong> o pulsa <strong> ‚ú®Que el destino lo decida</strong>."
  },
  en: {
    brand: "Librosfera",
    taglineSummary: "About this guide",
    taglineParagraph:
      `Recommendations for readers who want books that hook you and stay with you.
       Stories with extraordinary or unforgettable characters.
       Here you'll find reads that are truly worth it.
       We also point out the <strong>red flags</strong> few mention:
       vulgar language, LGBT references, toxic relationships, violence, psychological tension...
       the things that matter to readers seeking great books.`,

    chooseGenres: "Choose one or more genres",
    hint: "Or let destiny decide for you.",
    destinyBtn: "‚ú® Let destiny decide",
    resetBtn: "‚Ü∫ Clear selection",

    refineSearch: "Refine your search",
    toneLabel: "Tone",
    paceLabel: "Pace",
    anyOption: "(any)",
    seeRecs: "‚ú® See recommendations",
    subhint: "Options auto-fill based on the genres you choose.",

    coffeeTitle: "‚òï Did it help?",
    coffeeText: "Buy me a coffee to keep this amazing project alive ‚ú®",
    coffeeBtn: "‚òï Buy me a coffee",

    loadingGenres: "Loading genres‚Ä¶",
    loadingCatalog: "Loading catalog‚Ä¶",
    noGenresFound: "No genres found.",
    noMatches: "No matches with those filters üò¢",
    pickOrDestiny: "Pick at least one <strong>genre</strong> or press <strong>‚ú® Let destiny decide</strong>."
  }
};

let currentLang = localStorage.getItem("lang") || "es";

// ========= Estado =========
let CATALOG = [];
let SELECTED_GENRES = new Set();
let SELECTED_TONE = "";
let SELECTED_PACE = "";
let HAS_TRIGGERED = false;

// ========= Helpers =========
const $ = s => document.querySelector(s);

function splitGenres(g){ return String(g||'').split(',').map(s=>s.trim()).filter(Boolean); }
function unique(arr){ return Array.from(new Set(arr.filter(Boolean))).sort((a,b)=>a.localeCompare(b,'es',{sensitivity:'base'})); }

function normalizeRow(r){
  // normaliza claves por si el CSV trae may√∫sculas/min√∫sculas distintas
  const out={};
  const keys = ['titulo','autor','genero','tono','ritmo','publico','etiquetas','flags','rese√±a','resena'];
  keys.forEach(k=>{
    out[k.includes('rese√±')?'rese√±a':k] = (r[k] ?? r[k?.toUpperCase?.()] ?? r[k?.toLowerCase?.()] ?? '').toString().trim();
  });
  return out;
}

function renderStateMessage(where, key){
  where.innerHTML = `<div class="empty">${i18n[currentLang][key]}</div>`;
}

// ========= G√©neros =========
function renderGenres(){
  const cont = $('#genresContainer');
  cont.innerHTML = "";
  const all = unique(CATALOG.flatMap(r => splitGenres(r.genero)));
  if(!all.length){
    renderStateMessage(cont, 'noGenresFound');
    return;
  }
  all.forEach(g=>{
    const b = document.createElement('button');
    b.textContent = g;
    b.className = SELECTED_GENRES.has(g) ? 'active' : '';
    b.onclick = () => {
      SELECTED_GENRES.has(g) ? SELECTED_GENRES.delete(g) : SELECTED_GENRES.add(g);
      updateVisibility();
      renderGenres();
      updateOpts();
      if (HAS_TRIGGERED) renderResults(applyFilters());
    };
    cont.appendChild(b);
  });
}

// ========= Filtros / resultados =========
function updateOpts(){
  const base = applyFilters();
  const tones = unique(base.map(r=>r.tono));
  const paces = unique(base.map(r=>r.ritmo));
  const toneSel = $('#toneSelect');
  const paceSel = $('#paceSelect');

  toneSel.innerHTML = `<option value="">${i18n[currentLang].anyOption}</option>` + tones.map(t=>`<option>${t}</option>`).join('');
  paceSel.innerHTML = `<option value="">${i18n[currentLang].anyOption}</option>` + paces.map(p=>`<option>${p}</option>`).join('');

  if(!SELECTED_TONE && tones.length===1){ SELECTED_TONE=tones[0]; toneSel.value=SELECTED_TONE; }
  if(!SELECTED_PACE && paces.length===1){ SELECTED_PACE=paces[0]; paceSel.value=SELECTED_PACE; }
}

function applyFilters(){
  let list = CATALOG;
  if(SELECTED_GENRES.size){
    list = list.filter(r=>{
      const gset = splitGenres(r.genero).map(x=>x.toLowerCase());
      return Array.from(SELECTED_GENRES).every(sel=>gset.includes(sel.toLowerCase()));
    });
  }
  if(SELECTED_TONE) list = list.filter(r=> (r.tono||'').toLowerCase() === SELECTED_TONE.toLowerCase());
  if(SELECTED_PACE) list = list.filter(r=> (r.ritmo||'').toLowerCase() === SELECTED_PACE.toLowerCase());
  return list;
}

function renderEmpty(){
  const root = $('#results');
  root.innerHTML = `<div class='empty'>${i18n[currentLang].pickOrDestiny}</div>`;
}

function renderResults(list){
  const root = $('#results'); 
  root.innerHTML = "";
  if(!list.length){
    renderStateMessage(root, 'noMatches');
    return;
  }
  list.slice(0,8).forEach(r=>{
    const d = document.createElement('div');
    d.className = 'book';
    d.innerHTML = `
      <h3>${r.titulo||'‚Äî'}</h3>
      <p><strong>${currentLang==='es'?'Autor':'Author'}:</strong> ${r.autor||'‚Äî'}</p>
      <p><strong>${currentLang==='es'?'G√©neros':'Genres'}:</strong> ${r.genero||'‚Äî'}</p>
      <p><strong>${currentLang==='es'?'Tono':'Tone'}:</strong> ${r.tono||'‚Äî'}</p>
      <p><strong>${currentLang==='es'?'Ritmo':'Pace'}:</strong> ${r.ritmo||'‚Äî'}</p>
      <p><strong>${currentLang==='es'?'P√∫blico':'Audience'}:</strong> ${r.publico||'‚Äî'}</p>
      <hr class="sep" />
      <p><strong>${currentLang==='es'?'Rese√±a':'Blurb'}:</strong> ${r['rese√±a'] || r['resena'] || '‚Äî'}</p>
    `;
    root.appendChild(d);
  });
  // scroll suave hacia resultados en m√≥vil
  root.scrollIntoView({behavior:'smooth', block:'start'});
}

// ========= Visibilidad =========
function updateVisibility(){
  const adv = $('#advancedFilters');
  if(SELECTED_GENRES.size>0){
    adv.classList.remove('hidden');
  }else{
    adv.classList.add('hidden');
    SELECTED_TONE=""; SELECTED_PACE="";
    const tSel=$('#toneSelect'), pSel=$('#paceSelect');
    if(tSel) tSel.value=""; if(pSel) pSel.value="";
  }
}

// ========= Reset =========
function resetAll(){
  SELECTED_GENRES.clear();
  SELECTED_TONE=""; SELECTED_PACE="";
  HAS_TRIGGERED=false;
  renderGenres(); updateOpts(); renderEmpty();
  $('#advancedFilters').classList.add('hidden');
}

// ========= Traducci√≥n UI =========
function applyTranslations(lang){
  // Textos con data-i18n
  document.querySelectorAll("[data-i18n]").forEach(el=>{
    const key = el.dataset.i18n;
    if(i18n[lang][key]) el.innerHTML = i18n[lang][key];
  });

  // Ajustar selects "(cualquiera)/(any)"
  const toneSel = $('#toneSelect');
  const paceSel = $('#paceSelect');
  if(toneSel && toneSel.options.length){
    toneSel.options[0].textContent = i18n[lang].anyOption;
  }
  if(paceSel && paceSel.options.length){
    paceSel.options[0].textContent = i18n[lang].anyOption;
  }

  // Bot√≥n del header
  const langBtn = document.getElementById("langToggle");
  if(langBtn) langBtn.textContent = (lang === "es") ? "üåê EN" : "üåê ES";

  currentLang = lang;
  localStorage.setItem("lang", lang);

  // Re-render de mensajes/labels en resultados (si ya hubo b√∫squeda)
  if(!HAS_TRIGGERED) renderEmpty();
  else renderResults(applyFilters());
}

// ========= Init =========
document.addEventListener('DOMContentLoaded', ()=>{
  // Mensajes iniciales
  renderStateMessage($('#genresContainer'), 'loadingGenres');
  renderStateMessage($('#results'), 'loadingCatalog');

  // Carga CSV
  Papa.parse(SHEET_URL, {
    download: true,
    header: true,
    skipEmptyLines: true,
    complete: res => {
      try{
        const rows = (res.data||[]).map(normalizeRow).filter(r => (r.titulo||'').trim() !== '');
        CATALOG = rows.length ? rows : FALLBACK_BOOKS;
      }catch(e){
        console.error('Error parseando CSV:', e);
        CATALOG = FALLBACK_BOOKS;
      }

      // Render inicial
      renderGenres();
      updateOpts();
      updateVisibility();
      applyTranslations(currentLang); // aplica idioma a todo
      renderEmpty();

      // Listeners
      const toneSel=$('#toneSelect'), paceSel=$('#paceSelect');
      if(toneSel) toneSel.onchange=e=>{SELECTED_TONE=e.target.value||""; if(HAS_TRIGGERED) renderResults(applyFilters())};
      if(paceSel) paceSel.onchange=e=>{SELECTED_PACE=e.target.value||""; if(HAS_TRIGGERED) renderResults(applyFilters())};
      $('#applyFiltersBtn').onclick=()=>{HAS_TRIGGERED=true; renderResults(applyFilters())};

      // ‚ÄúQue el destino lo decida‚Äù ‚Äî NO oculta g√©neros
      $('#destinyBtn').onclick=()=>{
        const pool = applyFilters();
        const base = (pool.length ? pool : (CATALOG.length ? CATALOG : FALLBACK_BOOKS));
        const pick = base[Math.floor(Math.random()*base.length)];
        HAS_TRIGGERED = true;
        renderResults([pick]);
      };

      $('#resetBtn').onclick=resetAll;

      // Toggle idioma
      const langBtn = document.getElementById("langToggle");
      if (langBtn) {
        langBtn.addEventListener("click", () => {
          applyTranslations(currentLang === "es" ? "en" : "es");
        });
      }
    },
    error: err => {
      console.error('Error descargando CSV:', err);
      CATALOG = FALLBACK_BOOKS;
      renderGenres(); updateOpts(); updateVisibility();
      applyTranslations(currentLang);
      renderEmpty();
    }
  });
});
